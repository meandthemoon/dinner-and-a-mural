#!/usr/bin/env node

if (process.argv.indexOf('--instr') > -1) {
  require('../_instrument')();
}

var
http = require('http'),
debug = require('debug')('join-the-team-p4-nodejs:server');

var
port = normalizePort('3030'),
config = require('../config'),
dbConnect = require('../db'),
routes = require('../routes'),
app = require('../main')(config);

app.set('port', config.web_server.port);

dbConnect(config.persistence)
  .then(function ( instance ) {

    routes(app, instance.models);

    var
    server = http.createServer(app);
    server.on('error', onError.bind(null, server));
    server.on('listening', onListening.bind(null, server));
    server.listen(port);

  })
  .catch(function ( ) {
    console.log('database sync error...');
    console.log(arguments);
  });

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError ( server, error ) {
  if (error.syscall !== 'listen') { throw error; }

  var bind = typeof port === 'string' ?
      'Pipe ' + port :
      'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening ( server ) {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
      'pipe ' + addr :
      'port ' + addr.port;
  console.log('Listening on ' + bind);
  debug('Listening on ' + bind);
}
